VITE_APP_BASE_URL=http://localhost:5000/
# VITE_APP_BASE_URL=https://resion-backend.vercel.app/
# VITE_APP_BASE_URL=https://ression-backend-new.vercel.app/
VITE_APP_EMAIL=admin@example.com
VITE_APP_PASSWORD=Admin@123
VITE_GOOGLE_MAPS_API_KEY=AIzaSyBjQV0o-PgqpQh9EaQs2JHLhTBAbf6qE_A

const getAllClusters = async (customer_code) => {
  try {
    // Step 1: Fetch all clusters and populate customer data
    const clusters = await Cluster.find()
      .populate("customers.customerId")
      .lean();

    const filteredClusters = [];
    const allCustomerIds = [];

    // Step 2: Collect all customer IDs for GeoLocation lookup
    for (const cluster of clusters) {
      for (const cust of cluster.customers) {
        if (cust.customerId) {
          allCustomerIds.push(cust.customerId._id.toString());
        }
      }
    }

    // Step 3: Bulk fetch GeoLocations
    const geoData = await GeoLocation.find({
      customerId: { $in: allCustomerIds },
    }).lean();

    const geoMap = new Map();
    for (const geo of geoData) {
      geoMap.set(geo.customerId.toString(), geo.MaingeoCoordinates);
    }

    // Step 4: Process each cluster
    for (const cluster of clusters) {
      const filteredCustomers = [];
      const cartridgeSizeCounts = {};

      for (const cust of cluster.customers) {
        if (!cust.customerId) continue;

        const customerData = cust.customerId;
        const contactNumber = customerData.contact_number;

        if (!customer_code || contactNumber === customer_code) {
          cust.customerId = customerData._id;
          cust.name = customerData.display_name || customerData.name;
          cust.contact_number = contactNumber;
          cust.cf_cartridge_qty = customerData.cf_cartridge_qty;
          cust.cf_cartridge_size = customerData.cf_cartridge_size;

          const geo = geoMap.get(customerData._id.toString());
          cust.geoCoordinates = geo || null;

          const size = customerData.cf_cartridge_size || "Unknown";
          cartridgeSizeCounts[size] = (cartridgeSizeCounts[size] || 0) + 1;

          filteredCustomers.push(cust);
        }
      }

      // Add filtered data to cluster
      cluster.customers = filteredCustomers;
      cluster.cartridgeSizeCounts = cartridgeSizeCounts;

      filteredClusters.push(cluster);
    }

    return filteredClusters;
  } catch (error) {
    throw new Error("Failed to fetch clusters: " + error.message);
  }
};